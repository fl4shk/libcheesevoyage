#!/usr/bin/env python3

from enum import Enum, auto
from collections import OrderedDict
from amaranth import *
#import amaranth.tracer
#from amaranth.hdl.rec import Record, Layout
from amaranth.lib.data import *
from amaranth.asserts import Assert, Assume, Cover
from amaranth.asserts import Past, Rose, Fell, Stable

#from libcheesevoyage.misc_util import *
from libcheesevoyage.misc_util import psconcat, sig_keep, Blank
#from libcheesevoyage.general.container_types import Splitrec
#import libcheesevoyage.general.container_types as cntnr


#class Field(SigInfo):
#	def __init__(
#		self,
#		#info: SigInfo,
#		basenm: str,
#		shape,
#		*,
#		ObjKind=Signal,
#		reset=0,
#		attrs: str=sig_keep(),
#		prefix: str="",
#		suffix: str="",
#		**kwargs
#	):
#		super().__init__(
#			basenm=basenm,
#			shape=shape,
#			ObjKind=ObjKind,
#			reset=reset,
#			attrs=attrs,
#			**kwargs
#		)
#		#self.__info = info
#		#self.__basenm = basenm
#		self.__prefix = prefix
#		self.__suffix = suffix
#		#self.__kwargs = kwargs
#		#self.__sig = self.info().mk_sig(
#		#	basenm=basenm,
#		#	prefix=prefix,
#		#	suffix=suffix,
#		#	kwargs=kwargs,
#		#)
#	#def info(self):
#	#	return self.__info
#	#def basenm(self):
#	#	return self.__basenm
#	def prefix(self):
#		return self.__prefix
#	def suffix(self):
#		return self.__suffix
#	#def kwargs(self):
#	#	return self.__kwargs
#	#def sig(self):
#	def mk_sig(self, **kwargs):
#		#return self.info().mk_sig
#		return self.mk_sig(
#			basenm=self.basenm(),
#			prefix=self.prefix(),
#			suffix=self.suffix(),
#			#**self.kwargs(),
#			**kwargs
#		)

#class SigCfgDict:
#	def __init__(
#		self,
#		dct: OrderedDict,
#	):
#		self.__dct = dct


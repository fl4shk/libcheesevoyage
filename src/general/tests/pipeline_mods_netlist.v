/* Generated by Yosys 0.30+48 (git sha1 14d50a176, gcc 13.1.1 -march=x86-64 -mtune=generic -O2 -fno-plt -fexceptions -fstack-clash-protection -fcf-protection -fPIC -Os) */

(* cells_not_processed =  1  *)
(* src = "pipeline_mods_test.v:2.1-143.10" *)
module Top(clk, rst, prev_data, prev_valid, prev_ready, next_data, next_valid, next_ready);
  (* src = "pipeline_mods_test.v:71.5-73.56" *)
  wire [1:0] _0_;
  (* src = "pipeline_mods_test.v:70.5-70.85" *)
  wire _1_;
  (* src = "pipeline_mods_test.v:70.5-70.85" *)
  wire _2_;
  (* src = "pipeline_mods_test.v:72.10-72.27" *)
  wire _3_;
  wire [1:0] _4_;
  wire _5_;
  (* src = "pipeline_mods_test.v:16.13-16.16" *)
  input clk;
  wire clk;
  (* src = "pipeline_mods_test.v:21.20-21.29" *)
  output [1:0] next_data;
  wire [1:0] next_data;
  (* src = "pipeline_mods_test.v:23.13-23.23" *)
  input next_ready;
  wire next_ready;
  (* src = "pipeline_mods_test.v:22.14-22.24" *)
  output next_valid;
  wire next_valid;
  (* src = "pipeline_mods_test.v:18.19-18.28" *)
  input [1:0] prev_data;
  wire [1:0] prev_data;
  (* src = "pipeline_mods_test.v:20.14-20.24" *)
  output prev_ready;
  wire prev_ready;
  (* src = "pipeline_mods_test.v:19.13-19.23" *)
  input prev_valid;
  wire prev_valid;
  (* src = "pipeline_mods_test.v:68.16-68.30" *)
  wire [2:1] \psb.lab_pass.sv2v_tmp_CF22A ;
  (* src = "pipeline_mods_test.v:30.9-30.12" *)
  wire \psb_intf.clk ;
  (* src = "pipeline_mods_test.v:53.10-53.15" *)
  wire \psb_intf.misc.clear ;
  (* src = "pipeline_mods_test.v:48.11-48.21" *)
  wire \psb_intf.misc.lab_valid_busy.valid_busy ;
  (* src = "pipeline_mods_test.v:35.15-35.19" *)
  reg [1:0] \psb_intf.next.data ;
  (* src = "pipeline_mods_test.v:34.10-34.15" *)
  wire \psb_intf.next.ready ;
  (* src = "pipeline_mods_test.v:33.9-33.14" *)
  wire \psb_intf.next.valid ;
  (* src = "pipeline_mods_test.v:40.16-40.20" *)
  wire [1:0] \psb_intf.prev.data ;
  (* src = "pipeline_mods_test.v:39.9-39.14" *)
  wire \psb_intf.prev.ready ;
  (* src = "pipeline_mods_test.v:38.10-38.15" *)
  wire \psb_intf.prev.valid ;
  (* src = "pipeline_mods_test.v:31.9-31.12" *)
  wire \psb_intf.rst ;
  (* src = "pipeline_mods_test.v:17.13-17.16" *)
  input rst;
  wire rst;
  assign _3_ = ! (* src = "pipeline_mods_test.v:72.10-72.27" *) \psb_intf.rst ;
  (* \always_ff  = 32'd1 *)
  (* src = "pipeline_mods_test.v:71.5-73.56" *)
  always @(posedge \psb_intf.clk )
    \psb_intf.next.data  <= _4_;
  assign _4_ = rst ? (* src = "pipeline_mods_test.v:72.10-72.27|pipeline_mods_test.v:72.6-73.56" *) \psb_intf.next.data  : prev_data;
  assign { \psb_intf.clk , \psb_intf.rst , \psb_intf.prev.data , \psb_intf.prev.valid , \psb_intf.next.ready  } = { clk, rst, prev_data, prev_valid, next_ready };
  assign { prev_ready, next_data, next_valid } = { \psb_intf.prev.ready , \psb_intf.next.data , \psb_intf.next.valid  };
  assign \psb.lab_pass.sv2v_tmp_CF22A  = { \psb_intf.prev.valid , \psb_intf.next.ready  };
  assign { _1_, _2_ } = { prev_valid, next_ready };
  assign _5_ = _3_;
  assign _0_ = _4_;
  assign \psb_intf.next.valid  = prev_valid;
  assign \psb_intf.prev.ready  = next_ready;
endmodule
